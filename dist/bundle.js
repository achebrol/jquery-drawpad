(()=>{var e={183:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".aa_item {\r\n  color: blue;\r\n}\r\n","",{version:3,sources:["webpack://./survey.css"],names:[],mappings:"AAAA;EACE,WAAW;AACb",sourcesContent:[".aa_item {\r\n  color: blue;\r\n}\r\n"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(u," */"),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([c]).join("\n")}return[i].join("\n")}},864:e=>{e.exports='<div id="aa_nps_surveyContainer"></div> '},379:(e,t,n)=>{"use strict";var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var s=e[o],u=t.base?s[0]+t.base:s[0],c=n[u]||0,l="".concat(u," ").concat(c);n[u]=c+1;var d=a(l),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(i[d].references++,i[d].updater(p)):i.push({identifier:l,updater:y(p,t),references:1}),r.push(l)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,l=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var v=null,f=0;function y(e,t){var n,r,o;if(t.singleton){var i=f++;n=v||(v=u(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=u(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var u=s(e,t),c=0;c<n.length;c++){var l=a(n[c]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=u}}}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e=jQuery;var t=n.n(e),r=function(){function e(){}return e.prototype.getSMSession=function(){for(var e="SMSESSION=",t=decodeURIComponent(document.cookie).split(";"),n=0;n<t.length;n++){for(var r=t[n];" "==r.charAt(0);)r=r.substring(1);if(0==r.indexOf(e))return r.substring(e.length,r.length)}return""},e}(),o=n(864),i=n.n(o),a=n(379),s=n.n(a),u=n(183);s()(u.Z,{insert:"head",singleton:!1}),u.Z.locals;const c=window.Survey;var l=function(){function e(e){this.options=e}return e.prototype.initializeSurvey=function(){return e=this,t=void 0,r=function(){var e,t,n,r;return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(o){switch(o.label){case 0:return[4,this.getActiveSurvey()];case 1:return(e=o.sent())?[4,this.renderSurvey(e)]:[2];case 2:return t=o.sent(),n=t.results,r=t.surveyJsOptions,[4,this.postSurveyResults(n,r)];case 3:return o.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}));var e,t,n,r},e.prototype.getActiveSurvey=function(){var e=this;return new Promise((function(t,n){$.ajax({url:e.options.url,contentType:"application/json",type:"POST",data:JSON.stringify({query:e.options.survey_id?"query Query($surveyId: String) \n                            { activeSurvey(surveyId: $surveyId) \n                                { \n                                  surveyId\n                                  activationWindowId\n                                  definition \n                                } \n                            }\n                        ":"query Query($archerId: String) \n                        { activeSurvey(archerId: $archerId) \n                            { \n                              surveyId\n                              activationWindowId\n                              definition \n                            } \n                        }\n                    ",variables:e.options.survey_id?{surveyId:e.options.survey_id}:{archerId:e.options.archer_id}}),success:function(e){var n=e.data.activeSurvey||{};t(n)},error:function(e){n(e)}})}))},e.prototype.postSurveyResults=function(e,t){var n=this;return new Promise((function(o,i){var a=(new r).getSMSession();$.ajax({url:n.options.url,contentType:"application/json",headers:{SMSESSION:a},type:"POST",data:JSON.stringify({query:"mutation CreateSurveyResultMutation($surveyId: String!,$archerId: String!, $input: SurveyResultInput!) \n                    {  createSurveyResult(\n                        surveyId: $surveyId, \n                        archerId: $archerId,\n                        input: $input\n                        )\n                    }\n                ",variables:{surveyId:n.options.survey_id,archerId:n.options.archer_id,input:{result:e.data}}}),error:function(){e.deleteCookie(),t.showDataSavingError()},success:function(n){var r;(null===(r=n.data)||void 0===r?void 0:r.createSurveyResult)||(e.deleteCookie(),t.showDataSavingError()),o(n.data.createSurveyResult)}})}))},e.prototype.renderSurvey=function(e){var t=this;return new Promise((function(n,r){var o=document.createElement("div");o.innerHTML=i(),document.getElementsByTagName("body")[0].appendChild(o);var a=e.definition||{};if(!e.surveyId)return console.log("No Active survey at the moment"),void("inline"===t.options.mode&&window.close());t.options.survey_id=e.surveyId,!0!==t.options.allow_multiple&&(a.cookieName=e.activationWindowId),c.StylesManager.applyTheme("bootstrap"),c.surveyStrings.emptySurvey="There is no survey active at the moment.",a.title="Feedback?",t.aa_survey=new c.Model(a),"completed"==t.aa_survey.state&&!0!==t.options.allow_multiple||("inline"===t.options.mode?$("#aa_nps_surveyContainer").Survey({model:t.aa_survey,onComplete:function(e,t){n({results:e,surveyJsOptions:t})}}):$("#aa_nps_surveyContainer").SurveyWindow({model:t.aa_survey,isExpanded:!0,closeOnCompleteTimeout:2,onComplete:function(e,t){n({results:e,surveyJsOptions:t})}}))}))},e}();t().fn.surveysPlugin=Object.assign((function(e){return(e=t().extend({},t().fn.surveysPlugin.options,e)).archer_id?(new l(e).initializeSurvey(),this):(console.error('Plugin options are missing required parameter "archer_id": ',JSON.stringify(e)),this)}),{options:{outputSelector:null,allow_multiple:!1,archer_id:"2340720",assetsUrl:"https://aanpsadminui.z13.web.core.windows.net",mode:"widget",survey_id:null,url:"https://aa-nps-admin-gw.azurewebsites.net/graphql"}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,